Terminals unused in grammar

   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   TOK_FUNCTION
   TOK_PARAM
   TOK_TYPE_ID
   TOK_POS
   TOK_NEG
   TOK_INDEX


State 48 conflicts: 8 reduce/reduce
State 60 conflicts: 1 shift/reduce
State 62 conflicts: 1 shift/reduce
State 63 conflicts: 1 shift/reduce
State 108 conflicts: 1 shift/reduce
State 109 conflicts: 1 shift/reduce
State 110 conflicts: 1 shift/reduce
State 111 conflicts: 1 shift/reduce
State 112 conflicts: 1 shift/reduce
State 113 conflicts: 1 shift/reduce
State 114 conflicts: 1 shift/reduce
State 115 conflicts: 1 shift/reduce
State 116 conflicts: 1 shift/reduce
State 117 conflicts: 1 shift/reduce
State 118 conflicts: 1 shift/reduce
State 119 conflicts: 1 shift/reduce
State 150 conflicts: 1 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program vardecl
    4        | program function
    5        | program error '}'
    6        | program error ';'
    7        | %empty

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' ';'
    9          | TOK_STRUCT TOK_IDENT '{' structcont '}' ';'

   10 structcont: varemptydec
   11           | structcont varemptydec

   12 type: plaintype
   13     | TOK_ARRAY TOK_LT plaintype TOK_GT

   14 plaintype: TOK_VOID
   15          | TOK_INT
   16          | TOK_STRING
   17          | TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT

   18 function: varname params block
   19         | varname params ';'

   20 params: '(' ')'
   21       | '(' varname
   22       | params ',' varname
   23       | params ')'

   24 block: ';'
   25      | '{' '}'
   26      | '{' statements '}'

   27 statements: statement
   28           | statements statement

   29 statement: vardecl
   30          | block
   31          | while
   32          | ifelse
   33          | return
   34          | expr ';'

   35 vardecl: varemptydec
   36        | varname '=' expr ';'

   37 varemptydec: varname ';'

   38 varname: type TOK_IDENT

   39 while: TOK_WHILE '(' expr ')' statement

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement
   41       | TOK_IF '(' expr ')' statement

   42 return: TOK_RETURN expr ';'
   43       | TOK_RETURN ';'

   44 expr: expr '=' expr
   45     | expr TOK_EQ expr
   46     | expr TOK_NE expr
   47     | expr TOK_LT expr
   48     | expr TOK_GT expr
   49     | expr TOK_LE expr
   50     | expr TOK_GE expr
   51     | expr '+' expr
   52     | expr '-' expr
   53     | expr '*' expr
   54     | expr '/' expr
   55     | expr '%' expr
   56     | '+' expr
   57     | '-' expr
   58     | TOK_NOT expr
   59     | '(' expr ')'
   60     | allocator
   61     | call
   62     | variable
   63     | constant

   64 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')'
   65          | TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   66          | TOK_ALLOC TOK_LT arraytype TOK_GT '(' expr ')'

   67 arraytype: TOK_ARRAY TOK_LT plaintype TOK_GT

   68 call: TOK_IDENT '(' ')'
   69     | TOK_IDENT '(' callargs ')'

   70 callargs: expr
   71         | callargs ',' expr

   72 variable: TOK_IDENT
   73         | expr '[' expr ']'
   74         | expr TOK_ARROW TOK_IDENT

   75 constant: TOK_INTCON
   76         | TOK_CHARCON
   77         | TOK_STRINGCON
   78         | TOK_NULLPTR


Terminals, with rules where they appear

$end (0) 0
'%' (37) 55
'(' (40) 20 21 39 40 41 59 64 65 66 68 69
')' (41) 20 23 39 40 41 59 64 65 66 68 69
'*' (42) 53
'+' (43) 51 56
',' (44) 22 71
'-' (45) 52 57
'/' (47) 54
';' (59) 6 8 9 19 24 34 36 37 42 43
'=' (61) 36 44
'[' (91) 73
']' (93) 73
'{' (123) 8 9 25 26
'}' (125) 5 8 9 25 26
error (256) 5 6
TOK_VOID (258) 14
TOK_INT (259) 15
TOK_STRING (260) 16 64
TOK_IF (261) 40 41
TOK_ELSE (262) 40
TOK_WHILE (263) 39
TOK_RETURN (264) 42 43
TOK_STRUCT (265) 8 9 17 65
TOK_NULLPTR (266) 78
TOK_ARRAY (267) 13 67
TOK_ARROW (268) 74
TOK_ALLOC (269) 64 65 66
TOK_PTR (270) 17
TOK_EQ (271) 45
TOK_NE (272) 46
TOK_LT (273) 13 17 47 64 65 66 67
TOK_LE (274) 49
TOK_GT (275) 13 17 48 64 65 66 67
TOK_GE (276) 50
TOK_NOT (277) 58
TOK_IDENT (278) 8 9 17 38 65 68 69 72 74
TOK_INTCON (279) 75
TOK_CHARCON (280) 76
TOK_STRINGCON (281) 77
TOK_ROOT (282)
TOK_BLOCK (283)
TOK_CALL (284)
TOK_FUNCTION (285)
TOK_PARAM (286)
TOK_TYPE_ID (287)
TOK_POS (288)
TOK_NEG (289)
TOK_INDEX (290)


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
start (51)
    on left: 1, on right: 0
program (52)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (53)
    on left: 8 9, on right: 2
structcont (54)
    on left: 10 11, on right: 9 11
type (55)
    on left: 12 13, on right: 38
plaintype (56)
    on left: 14 15 16 17, on right: 12 13 67
function (57)
    on left: 18 19, on right: 4
params (58)
    on left: 20 21 22 23, on right: 18 19 22 23
block (59)
    on left: 24 25 26, on right: 18 30
statements (60)
    on left: 27 28, on right: 26 28
statement (61)
    on left: 29 30 31 32 33 34, on right: 27 28 39 40 41
vardecl (62)
    on left: 35 36, on right: 3 29
varemptydec (63)
    on left: 37, on right: 10 11 35
varname (64)
    on left: 38, on right: 18 19 21 22 36 37
while (65)
    on left: 39, on right: 31
ifelse (66)
    on left: 40 41, on right: 32
return (67)
    on left: 42 43, on right: 33
expr (68)
    on left: 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61
    62 63, on right: 34 36 39 40 41 42 44 45 46 47 48 49 50 51 52 53
    54 55 56 57 58 59 64 66 70 71 73 74
allocator (69)
    on left: 64 65 66, on right: 60
arraytype (70)
    on left: 67, on right: 66
call (71)
    on left: 68 69, on right: 61
callargs (72)
    on left: 70 71, on right: 69 71
variable (73)
    on left: 72 73 74, on right: 62
constant (74)
    on left: 75 76 77 78, on right: 63


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . vardecl
    4        | program . function
    5        | program . error '}'
    6        | program . error ';'

    error       shift, and go to state 4
    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_STRUCT  shift, and go to state 8
    TOK_ARRAY   shift, and go to state 9
    TOK_PTR     shift, and go to state 10

    $end  reduce using rule 1 (start)

    structdef    go to state 11
    type         go to state 12
    plaintype    go to state 13
    function     go to state 14
    vardecl      go to state 15
    varemptydec  go to state 16
    varname      go to state 17


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 18
    ';'  shift, and go to state 19


State 5

   14 plaintype: TOK_VOID .

    $default  reduce using rule 14 (plaintype)


State 6

   15 plaintype: TOK_INT .

    $default  reduce using rule 15 (plaintype)


State 7

   16 plaintype: TOK_STRING .

    $default  reduce using rule 16 (plaintype)


State 8

    8 structdef: TOK_STRUCT . TOK_IDENT '{' '}' ';'
    9          | TOK_STRUCT . TOK_IDENT '{' structcont '}' ';'

    TOK_IDENT  shift, and go to state 20


State 9

   13 type: TOK_ARRAY . TOK_LT plaintype TOK_GT

    TOK_LT  shift, and go to state 21


State 10

   17 plaintype: TOK_PTR . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT

    TOK_LT  shift, and go to state 22


State 11

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 12

   38 varname: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 23


State 13

   12 type: plaintype .

    $default  reduce using rule 12 (type)


State 14

    4 program: program function .

    $default  reduce using rule 4 (program)


State 15

    3 program: program vardecl .

    $default  reduce using rule 3 (program)


State 16

   35 vardecl: varemptydec .

    $default  reduce using rule 35 (vardecl)


State 17

   18 function: varname . params block
   19         | varname . params ';'
   36 vardecl: varname . '=' expr ';'
   37 varemptydec: varname . ';'

    '='  shift, and go to state 24
    ';'  shift, and go to state 25
    '('  shift, and go to state 26

    params  go to state 27


State 18

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 19

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 20

    8 structdef: TOK_STRUCT TOK_IDENT . '{' '}' ';'
    9          | TOK_STRUCT TOK_IDENT . '{' structcont '}' ';'

    '{'  shift, and go to state 28


State 21

   13 type: TOK_ARRAY TOK_LT . plaintype TOK_GT

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 10

    plaintype  go to state 29


State 22

   17 plaintype: TOK_PTR TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT

    TOK_STRUCT  shift, and go to state 30


State 23

   38 varname: type TOK_IDENT .

    $default  reduce using rule 38 (varname)


State 24

   36 vardecl: varname '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 25

   37 varemptydec: varname ';' .

    $default  reduce using rule 37 (varemptydec)


State 26

   20 params: '(' . ')'
   21       | '(' . varname

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 9
    TOK_PTR     shift, and go to state 10
    ')'         shift, and go to state 46

    type       go to state 12
    plaintype  go to state 13
    varname    go to state 47


State 27

   18 function: varname params . block
   19         | varname params . ';'
   22 params: params . ',' varname
   23       | params . ')'

    ';'  shift, and go to state 48
    '{'  shift, and go to state 49
    ')'  shift, and go to state 50
    ','  shift, and go to state 51

    block  go to state 52


State 28

    8 structdef: TOK_STRUCT TOK_IDENT '{' . '}' ';'
    9          | TOK_STRUCT TOK_IDENT '{' . structcont '}' ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 9
    TOK_PTR     shift, and go to state 10
    '}'         shift, and go to state 53

    structcont   go to state 54
    type         go to state 12
    plaintype    go to state 13
    varemptydec  go to state 55
    varname      go to state 56


State 29

   13 type: TOK_ARRAY TOK_LT plaintype . TOK_GT

    TOK_GT  shift, and go to state 57


State 30

   17 plaintype: TOK_PTR TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT

    TOK_IDENT  shift, and go to state 58


State 31

   78 constant: TOK_NULLPTR .

    $default  reduce using rule 78 (constant)


State 32

   64 allocator: TOK_ALLOC . TOK_LT TOK_STRING TOK_GT '(' expr ')'
   65          | TOK_ALLOC . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   66          | TOK_ALLOC . TOK_LT arraytype TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 59


State 33

   58 expr: TOK_NOT . expr

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 60
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 34

   68 call: TOK_IDENT . '(' ')'
   69     | TOK_IDENT . '(' callargs ')'
   72 variable: TOK_IDENT .

    '('  shift, and go to state 61

    $default  reduce using rule 72 (variable)


State 35

   75 constant: TOK_INTCON .

    $default  reduce using rule 75 (constant)


State 36

   76 constant: TOK_CHARCON .

    $default  reduce using rule 76 (constant)


State 37

   77 constant: TOK_STRINGCON .

    $default  reduce using rule 77 (constant)


State 38

   56 expr: '+' . expr

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 62
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 39

   57 expr: '-' . expr

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 63
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 40

   59 expr: '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 64
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 41

   36 vardecl: varname '=' expr . ';'
   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LT     shift, and go to state 68
    TOK_LE     shift, and go to state 69
    TOK_GT     shift, and go to state 70
    TOK_GE     shift, and go to state 71
    '='        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    ';'        shift, and go to state 78
    '['        shift, and go to state 79


State 42

   60 expr: allocator .

    $default  reduce using rule 60 (expr)


State 43

   61 expr: call .

    $default  reduce using rule 61 (expr)


State 44

   62 expr: variable .

    $default  reduce using rule 62 (expr)


State 45

   63 expr: constant .

    $default  reduce using rule 63 (expr)


State 46

   20 params: '(' ')' .

    $default  reduce using rule 20 (params)


State 47

   21 params: '(' varname .

    $default  reduce using rule 21 (params)


State 48

   19 function: varname params ';' .
   24 block: ';' .

    $end        reduce using rule 19 (function)
    $end        [reduce using rule 24 (block)]
    error       reduce using rule 19 (function)
    error       [reduce using rule 24 (block)]
    TOK_VOID    reduce using rule 19 (function)
    TOK_VOID    [reduce using rule 24 (block)]
    TOK_INT     reduce using rule 19 (function)
    TOK_INT     [reduce using rule 24 (block)]
    TOK_STRING  reduce using rule 19 (function)
    TOK_STRING  [reduce using rule 24 (block)]
    TOK_STRUCT  reduce using rule 19 (function)
    TOK_STRUCT  [reduce using rule 24 (block)]
    TOK_ARRAY   reduce using rule 19 (function)
    TOK_ARRAY   [reduce using rule 24 (block)]
    TOK_PTR     reduce using rule 19 (function)
    TOK_PTR     [reduce using rule 24 (block)]
    $default    reduce using rule 19 (function)


State 49

   25 block: '{' . '}'
   26      | '{' . statements '}'

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 80
    TOK_WHILE      shift, and go to state 81
    TOK_RETURN     shift, and go to state 82
    TOK_NULLPTR    shift, and go to state 31
    TOK_ARRAY      shift, and go to state 9
    TOK_ALLOC      shift, and go to state 32
    TOK_PTR        shift, and go to state 10
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '}'            shift, and go to state 83
    ';'            shift, and go to state 84
    '{'            shift, and go to state 49
    '('            shift, and go to state 40

    type         go to state 12
    plaintype    go to state 13
    block        go to state 85
    statements   go to state 86
    statement    go to state 87
    vardecl      go to state 88
    varemptydec  go to state 16
    varname      go to state 89
    while        go to state 90
    ifelse       go to state 91
    return       go to state 92
    expr         go to state 93
    allocator    go to state 42
    call         go to state 43
    variable     go to state 44
    constant     go to state 45


State 50

   23 params: params ')' .

    $default  reduce using rule 23 (params)


State 51

   22 params: params ',' . varname

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 9
    TOK_PTR     shift, and go to state 10

    type       go to state 12
    plaintype  go to state 13
    varname    go to state 94


State 52

   18 function: varname params block .

    $default  reduce using rule 18 (function)


State 53

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' . ';'

    ';'  shift, and go to state 95


State 54

    9 structdef: TOK_STRUCT TOK_IDENT '{' structcont . '}' ';'
   11 structcont: structcont . varemptydec

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 9
    TOK_PTR     shift, and go to state 10
    '}'         shift, and go to state 96

    type         go to state 12
    plaintype    go to state 13
    varemptydec  go to state 97
    varname      go to state 56


State 55

   10 structcont: varemptydec .

    $default  reduce using rule 10 (structcont)


State 56

   37 varemptydec: varname . ';'

    ';'  shift, and go to state 25


State 57

   13 type: TOK_ARRAY TOK_LT plaintype TOK_GT .

    $default  reduce using rule 13 (type)


State 58

   17 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT

    TOK_GT  shift, and go to state 98


State 59

   64 allocator: TOK_ALLOC TOK_LT . TOK_STRING TOK_GT '(' expr ')'
   65          | TOK_ALLOC TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   66          | TOK_ALLOC TOK_LT . arraytype TOK_GT '(' expr ')'

    TOK_STRING  shift, and go to state 99
    TOK_STRUCT  shift, and go to state 100
    TOK_ARRAY   shift, and go to state 101

    arraytype  go to state 102


State 60

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   58     | TOK_NOT expr .
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '['        shift, and go to state 79

    '['       [reduce using rule 58 (expr)]
    $default  reduce using rule 58 (expr)


State 61

   68 call: TOK_IDENT '(' . ')'
   69     | TOK_IDENT '(' . callargs ')'

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40
    ')'            shift, and go to state 103

    expr       go to state 104
    allocator  go to state 42
    call       go to state 43
    callargs   go to state 105
    variable   go to state 44
    constant   go to state 45


State 62

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | '+' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 79

    '['       [reduce using rule 56 (expr)]
    $default  reduce using rule 56 (expr)


State 63

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   57     | '-' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 79

    '['       [reduce using rule 57 (expr)]
    $default  reduce using rule 57 (expr)


State 64

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   59     | '(' expr . ')'
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LT     shift, and go to state 68
    TOK_LE     shift, and go to state 69
    TOK_GT     shift, and go to state 70
    TOK_GE     shift, and go to state 71
    '='        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    ')'        shift, and go to state 106
    '['        shift, and go to state 79


State 65

   74 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 107


State 66

   45 expr: expr TOK_EQ . expr

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 108
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 67

   46 expr: expr TOK_NE . expr

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 109
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 68

   47 expr: expr TOK_LT . expr

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 110
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 69

   49 expr: expr TOK_LE . expr

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 111
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 70

   48 expr: expr TOK_GT . expr

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 112
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 71

   50 expr: expr TOK_GE . expr

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 113
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 72

   44 expr: expr '=' . expr

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 114
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 73

   51 expr: expr '+' . expr

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 115
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 74

   52 expr: expr '-' . expr

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 116
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 75

   53 expr: expr '*' . expr

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 117
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 76

   54 expr: expr '/' . expr

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 118
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 77

   55 expr: expr '%' . expr

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 119
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 78

   36 vardecl: varname '=' expr ';' .

    $default  reduce using rule 36 (vardecl)


State 79

   73 variable: expr '[' . expr ']'

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 120
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 80

   40 ifelse: TOK_IF . '(' expr ')' statement TOK_ELSE statement
   41       | TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 121


State 81

   39 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 122


State 82

   42 return: TOK_RETURN . expr ';'
   43       | TOK_RETURN . ';'

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    ';'            shift, and go to state 123
    '('            shift, and go to state 40

    expr       go to state 124
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 83

   25 block: '{' '}' .

    $default  reduce using rule 25 (block)


State 84

   24 block: ';' .

    $default  reduce using rule 24 (block)


State 85

   30 statement: block .

    $default  reduce using rule 30 (statement)


State 86

   26 block: '{' statements . '}'
   28 statements: statements . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 80
    TOK_WHILE      shift, and go to state 81
    TOK_RETURN     shift, and go to state 82
    TOK_NULLPTR    shift, and go to state 31
    TOK_ARRAY      shift, and go to state 9
    TOK_ALLOC      shift, and go to state 32
    TOK_PTR        shift, and go to state 10
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '}'            shift, and go to state 125
    ';'            shift, and go to state 84
    '{'            shift, and go to state 49
    '('            shift, and go to state 40

    type         go to state 12
    plaintype    go to state 13
    block        go to state 85
    statement    go to state 126
    vardecl      go to state 88
    varemptydec  go to state 16
    varname      go to state 89
    while        go to state 90
    ifelse       go to state 91
    return       go to state 92
    expr         go to state 93
    allocator    go to state 42
    call         go to state 43
    variable     go to state 44
    constant     go to state 45


State 87

   27 statements: statement .

    $default  reduce using rule 27 (statements)


State 88

   29 statement: vardecl .

    $default  reduce using rule 29 (statement)


State 89

   36 vardecl: varname . '=' expr ';'
   37 varemptydec: varname . ';'

    '='  shift, and go to state 24
    ';'  shift, and go to state 25


State 90

   31 statement: while .

    $default  reduce using rule 31 (statement)


State 91

   32 statement: ifelse .

    $default  reduce using rule 32 (statement)


State 92

   33 statement: return .

    $default  reduce using rule 33 (statement)


State 93

   34 statement: expr . ';'
   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LT     shift, and go to state 68
    TOK_LE     shift, and go to state 69
    TOK_GT     shift, and go to state 70
    TOK_GE     shift, and go to state 71
    '='        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    ';'        shift, and go to state 127
    '['        shift, and go to state 79


State 94

   22 params: params ',' varname .

    $default  reduce using rule 22 (params)


State 95

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' ';' .

    $default  reduce using rule 8 (structdef)


State 96

    9 structdef: TOK_STRUCT TOK_IDENT '{' structcont '}' . ';'

    ';'  shift, and go to state 128


State 97

   11 structcont: structcont varemptydec .

    $default  reduce using rule 11 (structcont)


State 98

   17 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT .

    $default  reduce using rule 17 (plaintype)


State 99

   64 allocator: TOK_ALLOC TOK_LT TOK_STRING . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 129


State 100

   65 allocator: TOK_ALLOC TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT '(' ')'

    TOK_IDENT  shift, and go to state 130


State 101

   67 arraytype: TOK_ARRAY . TOK_LT plaintype TOK_GT

    TOK_LT  shift, and go to state 131


State 102

   66 allocator: TOK_ALLOC TOK_LT arraytype . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 132


State 103

   68 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 68 (call)


State 104

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   70 callargs: expr .
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LT     shift, and go to state 68
    TOK_LE     shift, and go to state 69
    TOK_GT     shift, and go to state 70
    TOK_GE     shift, and go to state 71
    '='        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 79

    $default  reduce using rule 70 (callargs)


State 105

   69 call: TOK_IDENT '(' callargs . ')'
   71 callargs: callargs . ',' expr

    ')'  shift, and go to state 133
    ','  shift, and go to state 134


State 106

   59 expr: '(' expr ')' .

    $default  reduce using rule 59 (expr)


State 107

   74 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 74 (variable)


State 108

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   45     | expr TOK_EQ expr .
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 79

    '['       [reduce using rule 45 (expr)]
    $default  reduce using rule 45 (expr)


State 109

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   46     | expr TOK_NE expr .
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 79

    '['       [reduce using rule 46 (expr)]
    $default  reduce using rule 46 (expr)


State 110

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   47     | expr TOK_LT expr .
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 79

    '['       [reduce using rule 47 (expr)]
    $default  reduce using rule 47 (expr)


State 111

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   49     | expr TOK_LE expr .
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 79

    '['       [reduce using rule 49 (expr)]
    $default  reduce using rule 49 (expr)


State 112

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   48     | expr TOK_GT expr .
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 79

    '['       [reduce using rule 48 (expr)]
    $default  reduce using rule 48 (expr)


State 113

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   50     | expr TOK_GE expr .
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 79

    '['       [reduce using rule 50 (expr)]
    $default  reduce using rule 50 (expr)


State 114

   44 expr: expr . '=' expr
   44     | expr '=' expr .
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LT     shift, and go to state 68
    TOK_LE     shift, and go to state 69
    TOK_GT     shift, and go to state 70
    TOK_GE     shift, and go to state 71
    '='        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 79

    '['       [reduce using rule 44 (expr)]
    $default  reduce using rule 44 (expr)


State 115

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   51     | expr '+' expr .
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 79

    '['       [reduce using rule 51 (expr)]
    $default  reduce using rule 51 (expr)


State 116

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   52     | expr '-' expr .
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 79

    '['       [reduce using rule 52 (expr)]
    $default  reduce using rule 52 (expr)


State 117

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   53     | expr '*' expr .
   54     | expr . '/' expr
   55     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '['        shift, and go to state 79

    '['       [reduce using rule 53 (expr)]
    $default  reduce using rule 53 (expr)


State 118

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   54     | expr '/' expr .
   55     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '['        shift, and go to state 79

    '['       [reduce using rule 54 (expr)]
    $default  reduce using rule 54 (expr)


State 119

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   55     | expr '%' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    '['        shift, and go to state 79

    '['       [reduce using rule 55 (expr)]
    $default  reduce using rule 55 (expr)


State 120

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   73         | expr '[' expr . ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LT     shift, and go to state 68
    TOK_LE     shift, and go to state 69
    TOK_GT     shift, and go to state 70
    TOK_GE     shift, and go to state 71
    '='        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 79
    ']'        shift, and go to state 135


State 121

   40 ifelse: TOK_IF '(' . expr ')' statement TOK_ELSE statement
   41       | TOK_IF '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 136
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 122

   39 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 137
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 123

   43 return: TOK_RETURN ';' .

    $default  reduce using rule 43 (return)


State 124

   42 return: TOK_RETURN expr . ';'
   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LT     shift, and go to state 68
    TOK_LE     shift, and go to state 69
    TOK_GT     shift, and go to state 70
    TOK_GE     shift, and go to state 71
    '='        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    ';'        shift, and go to state 138
    '['        shift, and go to state 79


State 125

   26 block: '{' statements '}' .

    $default  reduce using rule 26 (block)


State 126

   28 statements: statements statement .

    $default  reduce using rule 28 (statements)


State 127

   34 statement: expr ';' .

    $default  reduce using rule 34 (statement)


State 128

    9 structdef: TOK_STRUCT TOK_IDENT '{' structcont '}' ';' .

    $default  reduce using rule 9 (structdef)


State 129

   64 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT . '(' expr ')'

    '('  shift, and go to state 139


State 130

   65 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT '(' ')'

    TOK_GT  shift, and go to state 140


State 131

   67 arraytype: TOK_ARRAY TOK_LT . plaintype TOK_GT

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 10

    plaintype  go to state 141


State 132

   66 allocator: TOK_ALLOC TOK_LT arraytype TOK_GT . '(' expr ')'

    '('  shift, and go to state 142


State 133

   69 call: TOK_IDENT '(' callargs ')' .

    $default  reduce using rule 69 (call)


State 134

   71 callargs: callargs ',' . expr

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 143
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 135

   73 variable: expr '[' expr ']' .

    $default  reduce using rule 73 (variable)


State 136

   40 ifelse: TOK_IF '(' expr . ')' statement TOK_ELSE statement
   41       | TOK_IF '(' expr . ')' statement
   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LT     shift, and go to state 68
    TOK_LE     shift, and go to state 69
    TOK_GT     shift, and go to state 70
    TOK_GE     shift, and go to state 71
    '='        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    ')'        shift, and go to state 144
    '['        shift, and go to state 79


State 137

   39 while: TOK_WHILE '(' expr . ')' statement
   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LT     shift, and go to state 68
    TOK_LE     shift, and go to state 69
    TOK_GT     shift, and go to state 70
    TOK_GE     shift, and go to state 71
    '='        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    ')'        shift, and go to state 145
    '['        shift, and go to state 79


State 138

   42 return: TOK_RETURN expr ';' .

    $default  reduce using rule 42 (return)


State 139

   64 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 146
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 140

   65 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT . '(' ')'

    '('  shift, and go to state 147


State 141

   67 arraytype: TOK_ARRAY TOK_LT plaintype . TOK_GT

    TOK_GT  shift, and go to state 148


State 142

   66 allocator: TOK_ALLOC TOK_LT arraytype TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 31
    TOK_ALLOC      shift, and go to state 32
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '('            shift, and go to state 40

    expr       go to state 149
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


State 143

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   71 callargs: callargs ',' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LT     shift, and go to state 68
    TOK_LE     shift, and go to state 69
    TOK_GT     shift, and go to state 70
    TOK_GE     shift, and go to state 71
    '='        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    '['        shift, and go to state 79

    $default  reduce using rule 71 (callargs)


State 144

   40 ifelse: TOK_IF '(' expr ')' . statement TOK_ELSE statement
   41       | TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 80
    TOK_WHILE      shift, and go to state 81
    TOK_RETURN     shift, and go to state 82
    TOK_NULLPTR    shift, and go to state 31
    TOK_ARRAY      shift, and go to state 9
    TOK_ALLOC      shift, and go to state 32
    TOK_PTR        shift, and go to state 10
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    ';'            shift, and go to state 84
    '{'            shift, and go to state 49
    '('            shift, and go to state 40

    type         go to state 12
    plaintype    go to state 13
    block        go to state 85
    statement    go to state 150
    vardecl      go to state 88
    varemptydec  go to state 16
    varname      go to state 89
    while        go to state 90
    ifelse       go to state 91
    return       go to state 92
    expr         go to state 93
    allocator    go to state 42
    call         go to state 43
    variable     go to state 44
    constant     go to state 45


State 145

   39 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 80
    TOK_WHILE      shift, and go to state 81
    TOK_RETURN     shift, and go to state 82
    TOK_NULLPTR    shift, and go to state 31
    TOK_ARRAY      shift, and go to state 9
    TOK_ALLOC      shift, and go to state 32
    TOK_PTR        shift, and go to state 10
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    ';'            shift, and go to state 84
    '{'            shift, and go to state 49
    '('            shift, and go to state 40

    type         go to state 12
    plaintype    go to state 13
    block        go to state 85
    statement    go to state 151
    vardecl      go to state 88
    varemptydec  go to state 16
    varname      go to state 89
    while        go to state 90
    ifelse       go to state 91
    return       go to state 92
    expr         go to state 93
    allocator    go to state 42
    call         go to state 43
    variable     go to state 44
    constant     go to state 45


State 146

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   64 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr . ')'
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LT     shift, and go to state 68
    TOK_LE     shift, and go to state 69
    TOK_GT     shift, and go to state 70
    TOK_GE     shift, and go to state 71
    '='        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    ')'        shift, and go to state 152
    '['        shift, and go to state 79


State 147

   65 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' . ')'

    ')'  shift, and go to state 153


State 148

   67 arraytype: TOK_ARRAY TOK_LT plaintype TOK_GT .

    $default  reduce using rule 67 (arraytype)


State 149

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_LE expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   66 allocator: TOK_ALLOC TOK_LT arraytype TOK_GT '(' expr . ')'
   73 variable: expr . '[' expr ']'
   74         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 65
    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LT     shift, and go to state 68
    TOK_LE     shift, and go to state 69
    TOK_GT     shift, and go to state 70
    TOK_GE     shift, and go to state 71
    '='        shift, and go to state 72
    '+'        shift, and go to state 73
    '-'        shift, and go to state 74
    '*'        shift, and go to state 75
    '/'        shift, and go to state 76
    '%'        shift, and go to state 77
    ')'        shift, and go to state 154
    '['        shift, and go to state 79


State 150

   40 ifelse: TOK_IF '(' expr ')' statement . TOK_ELSE statement
   41       | TOK_IF '(' expr ')' statement .

    TOK_ELSE  shift, and go to state 155

    TOK_ELSE  [reduce using rule 41 (ifelse)]
    $default  reduce using rule 41 (ifelse)


State 151

   39 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 39 (while)


State 152

   64 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')' .

    $default  reduce using rule 64 (allocator)


State 153

   65 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')' .

    $default  reduce using rule 65 (allocator)


State 154

   66 allocator: TOK_ALLOC TOK_LT arraytype TOK_GT '(' expr ')' .

    $default  reduce using rule 66 (allocator)


State 155

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 80
    TOK_WHILE      shift, and go to state 81
    TOK_RETURN     shift, and go to state 82
    TOK_NULLPTR    shift, and go to state 31
    TOK_ARRAY      shift, and go to state 9
    TOK_ALLOC      shift, and go to state 32
    TOK_PTR        shift, and go to state 10
    TOK_NOT        shift, and go to state 33
    TOK_IDENT      shift, and go to state 34
    TOK_INTCON     shift, and go to state 35
    TOK_CHARCON    shift, and go to state 36
    TOK_STRINGCON  shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    ';'            shift, and go to state 84
    '{'            shift, and go to state 49
    '('            shift, and go to state 40

    type         go to state 12
    plaintype    go to state 13
    block        go to state 85
    statement    go to state 156
    vardecl      go to state 88
    varemptydec  go to state 16
    varname      go to state 89
    while        go to state 90
    ifelse       go to state 91
    return       go to state 92
    expr         go to state 93
    allocator    go to state 42
    call         go to state 43
    variable     go to state 44
    constant     go to state 45


State 156

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 40 (ifelse)
